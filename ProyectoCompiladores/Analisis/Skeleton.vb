'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser
    Public arbol As AST

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Whitespace] = 2                          ' Whitespace
        [Semi] = 3                                ' ';'
        [Apagar_motor] = 4                        ' 'apagar_motor'
        [Elevarse] = 5                            ' elevarse
        [Encender_motor] = 6                      ' 'encender_motor'
        [Girar_derecha] = 7                       ' 'girar_derecha'
        [Girar_izquierda] = 8                     ' 'girar_izquierda'
        [Regresar_punto_partida] = 9              ' 'regresar_punto_partida'
        [Rotar_adelante] = 10                     ' 'rotar_adelante'
        [Rotar_atras] = 11                        ' 'rotar_atras'
        [Command] = 12                            ' <Command>
        [Function] = 13                           ' <Function>
        [Program] = 14                            ' <Program>
    End Enum

    Private Enum ProductionIndex
        [Program] = 0                             ' <Program> ::= <Command>
        [Program2] = 1                            ' <Program> ::= <Program> <Command>
        [Command_Semi] = 2                        ' <Command> ::= <Function> ';'
        [Function_Encender_motor] = 3             ' <Function> ::= 'encender_motor'
        [Function_Apagar_motor] = 4               ' <Function> ::= 'apagar_motor'
        [Function_Girar_derecha] = 5              ' <Function> ::= 'girar_derecha'
        [Function_Girar_izquierda] = 6            ' <Function> ::= 'girar_izquierda'
        [Function_Elevarse] = 7                   ' <Function> ::= elevarse
        [Function_Rotar_adelante] = 8             ' <Function> ::= 'rotar_adelante'
        [Function_Rotar_atras] = 9                ' <Function> ::= 'rotar_atras'
        [Function_Regresar_punto_partida] = 10    ' <Function> ::= 'regresar_punto_partida'
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.

        Parser.LoadTables(Path.Combine(Application.StartupPath, "Ejemplo1.egt"))
    End Sub

    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done As Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    '.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    ' Entrada Aceptada!

                    ' En esta produccion se crea el nodo raiz de nuestro arbol de analisis sintactico.
                    ' Utilizaremos el metodo CreateNewObject en donde se incrustaron las sentencias de codigo
                    ' para crear nuestro propio arbol utilizando el patron interpreter.

                    Done = True
                    Accepted = True
                    ' Se crea nuestro propio arbol de analisis sintactico utilizando la raiz
                    ' del arbol de GOLD Parser para comenzar a recorrerlo
                    arbol = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Public Function ObtenerArbol() As AST
        Return arbol
    End Function

    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        With Reduction
            Select Case .Parent.TableIndex                        
                Case ProductionIndex.Program
                    ' <Program> ::= <Command> 
                    Return New AST(CreateNewObject(Reduction.Data(0)))
                Case ProductionIndex.Program2
                    ' <Program> ::= <Program> <Command> 
                    Dim instructionList As LinkedList(Of Instruccion) = CreateNewObject(Reduction.Data(0))
                    instructionList.AddLast(CreateNewObject(Reduction.Data(1)))
                    Return instructionList

                Case ProductionIndex.Command_Semi
                    ' <Command> ::= <Function> ';' 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList

                Case ProductionIndex.Function_Encender_motor
                    ' <Function> ::= 'encender_motor' 
                    Result = New EncenderMotor()

                Case ProductionIndex.Function_Apagar_motor
                    ' <Function> ::= 'apagar_motor' 
                    Result = New ApagarMotor()

                Case ProductionIndex.Function_Girar_derecha
                    ' <Function> ::= 'girar_derecha' 
                    Result = New GirarDerecha()

                Case ProductionIndex.Function_Girar_izquierda
                    ' <Function> ::= 'girar_izquierda' 
                    Result = New GirarIzquierda()

                Case ProductionIndex.Function_Elevarse
                    ' <Function> ::= elevarse 
                    Result = New Elevarse()

                Case ProductionIndex.Function_Rotar_adelante
                    ' <Function> ::= 'rotar_adelante' 
                    Result = New RotarAdelante()

                Case ProductionIndex.Function_Rotar_atras
                    ' <Function> ::= 'rotar_atras' 
                    Result = New RotarAtras()

                Case ProductionIndex.Function_Regresar_punto_partida
                    ' <Function> ::= 'regresar_punto_partida' 
                    Result = New RegresarPuntoPartida()

            End Select
        End With     

        Return Result
    End Function
End Module
