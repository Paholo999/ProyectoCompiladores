'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser
    Public arbol As AST
    Public ts As TablaSimbolos
    Public variable As Variable

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Whitespace] = 2                          ' Whitespace
        [Lparen] = 3                              ' '('
        [Rparen] = 4                              ' ')'
        [Semi] = 5                                ' ';'
        [Lbrace] = 6                              ' '{'
        [Rbrace] = 7                              ' '}'
        [Eq] = 8                                  ' '='
        [Boolean] = 9                             ' Boolean
        [Identifier] = 10                         ' IDENTIFIER
        [Method] = 11                             ' METHOD
        [Number] = 12                             ' Number
        [Var] = 13                                ' var
        [Void] = 14                               ' void
        [Assignment] = 15                         ' <Assignment>
        [Command] = 16                            ' <Command>
        [Expression] = 17                         ' <Expression>
        [Methodcall] = 18                         ' <MethodCall>
        [Methoddeclaration] = 19                  ' <MethodDeclaration>
        [Program] = 20                            ' <Program>
        [Variabledeclaration] = 21                ' <VariableDeclaration>
    End Enum

    Private Enum ProductionIndex
        [Program] = 0                             ' <Program> ::= <Command>
        [Program2] = 1                            ' <Program> ::= <Program> <Command>
        [Command] = 2                             ' <Command> ::= <VariableDeclaration>
        [Command2] = 3                            ' <Command> ::= <MethodDeclaration>
        [Command3] = 4                            ' <Command> ::= <MethodCall>
        [Command4] = 5                            ' <Command> ::= <Assignment>
        [Expression_Boolean] = 6                  ' <Expression> ::= Boolean
        [Expression_Number] = 7                   ' <Expression> ::= Number
        [Variabledeclaration_Var_Identifier_Semi] = 8 ' <VariableDeclaration> ::= var IDENTIFIER ';'
        [Assignment_Identifier_Eq_Semi] = 9       ' <Assignment> ::= IDENTIFIER '=' <Expression> ';'
        [Methoddeclaration_Void_Method_Lparen_Rparen_Lbrace_Rbrace_Semi] = 10 ' <MethodDeclaration> ::= void METHOD '(' ')' '{' <Assignment> '}' ';'
        [Methodcall_Method_Lparen_Rparen_Semi] = 11 ' <MethodCall> ::= METHOD '(' ')' ';'
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.

        Parser.LoadTables(Path.Combine(Application.StartupPath, "Gramatica_dron.egt"))
    End Sub

    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done As Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    '.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True
                    arbol = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Public Function ObtenerArbol() As AST
        Return arbol
    End Function

    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing
        Dim nuevaVariable As Variable = Nothing
        Dim variable As String = ""
        Dim valor As String = ""
        With Reduction
            Select Case .Parent.TableIndex
                Case ProductionIndex.Program
                    ' <Program> ::= <Command> 
                    Return New AST(CreateNewObject(Reduction.Data(0)))
                Case ProductionIndex.Program2
                    ' <Program> ::= <Program> <Command> 
                    Try
                        Dim instructionList As LinkedList(Of Instruccion) = CreateNewObject(Reduction.Data(0))
                        instructionList.AddLast(CreateNewObject(Reduction.Data(1)))
                        Return instructionList
                    Catch ex As Exception
                        MsgBox(ex.Message)
                    End Try
                Case ProductionIndex.Command
                    ' <Command> ::= <VariableDeclaration> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList

                Case ProductionIndex.Command2
                    ' <Command> ::= <MethodDeclaration> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList
                Case ProductionIndex.Command3
                    ' <Command> ::= <MethodCall> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList
                Case ProductionIndex.Command4
                    ' <Command> ::= <Assignment> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList

                Case ProductionIndex.Expression_Boolean
                    ' <Expression> ::= Boolean 

                Case ProductionIndex.Expression_Number
                    ' <Expression> ::= Number 

                Case ProductionIndex.Variabledeclaration_Var_Identifier_Semi
                    ' <VariableDeclaration> ::= var IDENTIFIER ';' 

                    ' token = Reduction.Item(1).Data
                    ' variable = New Variable(token)
                    If Reduction.Data(1).ToString.Equals("encender") Then
                        variable = Reduction.Data(1).ToString
                        valor = Simbolo.Tipo_Var.LOGICO
                    Else
                        variable = Reduction.Data(1).ToString
                        valor = Simbolo.Tipo_Var.NUMERO

                    End If
                    nuevaVariable = New Variable(variable, valor)
                    Result = nuevaVariable

                Case ProductionIndex.Assignment_Identifier_Eq_Semi
                    ' <Assignment> ::= IDENTIFIER '=' <Expression> ';'
                    CreateNewObject(Reduction.Item(2).Data)
                    Result = New Asignacion()
                Case ProductionIndex.Methoddeclaration_Void_Method_Lparen_Rparen_Lbrace_Rbrace_Semi
                    ' <MethodDeclaration> ::= void METHOD '(' ')' '{' <Assignment> '}' ';' 
                    CreateNewObject(Reduction.Item(5).Data)
                    Result = New Metodo()
                Case ProductionIndex.Methodcall_Method_Lparen_Rparen_Semi
                    ' <MethodCall> ::= METHOD '(' ')' ';' 
                    Result = New MetodoLlamada()
            End Select
        End With

        Return Result
    End Function
End Module
