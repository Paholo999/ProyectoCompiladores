'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser
    Public arbol As AST

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Whitespace] = 2                          ' Whitespace
        [Semi] = 3                                ' ';'
        [Identifier] = 4                          ' IDENTIFIER
        [Var] = 5                                 ' var
        [Command] = 6                             ' <Command>
        [Program] = 7                             ' <Program>
        [Variabledeclaration] = 8                 ' <VariableDeclaration>
    End Enum

    Private Enum ProductionIndex
        [Program] = 0                             ' <Program> ::= <Command>
        [Program2] = 1                            ' <Program> ::= <Program> <Command>
        [Command] = 2                             ' <Command> ::= <VariableDeclaration>
        [Variabledeclaration_Var_Identifier_Semi] = 3 ' <VariableDeclaration> ::= var IDENTIFIER ';'
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.

        Parser.LoadTables(Path.Combine(Application.StartupPath, "Gramatica_DRONparte1.egt"))
    End Sub

    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done as Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response              
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    '.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True
                    arbol = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError 
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function
    Public Function ObtenerArbol() As AST
        Return arbol
    End Function
    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        With Reduction
            Select Case .Parent.TableIndex                        
                Case ProductionIndex.Program
                    ' <Program> ::= <Command> 
                    Return New AST(CreateNewObject(Reduction.Data(0)))
                Case ProductionIndex.Program2
                    ' <Program> ::= <Program> <Command> 
                    Dim instructionList As LinkedList(Of Instruccion) = CreateNewObject(Reduction.Data(0))
                    instructionList.AddLast(CreateNewObject(Reduction.Data(1)))
                    Return instructionList
                Case ProductionIndex.Command
                    ' <Command> ::= <VariableDeclaration> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList

                Case ProductionIndex.Variabledeclaration_Var_Identifier_Semi
                    ' <VariableDeclaration> ::= var IDENTIFIER ';' 
                    Result = New Variable()
            End Select
        End With     

        Return Result
    End Function
End Module
