'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser
    Public arbol As AST
    Public ts As TablaSimbolos
    Public ts2 As TablaSimbolos
    Public variable As Variable
    Public contador As Integer = 0
    Dim metodo As String = ""

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Whitespace] = 2                          ' Whitespace
        [Lparen] = 3                              ' '('
        [Rparen] = 4                              ' ')'
        [Semi] = 5                                ' ';'
        [Lbracket] = 6                            ' '['
        [Rbracket] = 7                            ' ']'
        [Lbrace] = 8                              ' '{'
        [Rbrace] = 9                              ' '}'
        [Eq] = 10                                 ' '='
        [Actionidentifier] = 11                   ' ActionIdentifier
        [Boolean] = 12                            ' Boolean
        [Method] = 13                             ' Method
        [Number] = 14                             ' Number
        [Startidentifier] = 15                    ' StartIdentifier
        [Var] = 16                                ' var
        [Void] = 17                               ' void
        [Assignment] = 18                         ' <Assignment>
        [Assignments] = 19                        ' <Assignments>
        [Command] = 20                            ' <Command>
        [Methodcall] = 21                         ' <MethodCall>
        [Methoddeclaration] = 22                  ' <MethodDeclaration>
        [Program] = 23                            ' <Program>
        [Variabledeclaration] = 24                ' <VariableDeclaration>
    End Enum

    Private Enum ProductionIndex
        [Program] = 0                             ' <Program> ::= <Command>
        [Command] = 1                             ' <Command> ::= <VariableDeclaration>
        [Command2] = 2                            ' <Command> ::= <MethodDeclaration>
        [Command3] = 3                            ' <Command> ::= <MethodCall>
        [Variabledeclaration_Var_Startidentifier_Semi] = 4 ' <VariableDeclaration> ::= var StartIdentifier ';'
        [Variabledeclaration_Var_Actionidentifier_Semi] = 5 ' <VariableDeclaration> ::= var ActionIdentifier ';'
        [Assignment_Startidentifier_Eq_Boolean_Semi] = 6 ' <Assignment> ::= StartIdentifier '=' Boolean ';'
        [Assignment_Actionidentifier_Eq_Number_Semi] = 7 ' <Assignment> ::= ActionIdentifier '=' Number ';'
        [Assignments] = 8                         ' <Assignments> ::= <Assignments> <Assignment>
        [Assignments2] = 9                        ' <Assignments> ::= <Assignment>
        [Methoddeclaration_Void_Method_Lparen_Rparen_Lbrace] = 10 ' <MethodDeclaration> ::= void Method '(' ')' '{'
        [Methoddeclaration_Lbracket_Rbracket] = 11 ' <MethodDeclaration> ::= '[' <Assignments> ']'
        [Methoddeclaration_Rbrace_Semi] = 12      ' <MethodDeclaration> ::= '}' ';'
        [Methodcall_Method_Lparen_Rparen_Semi] = 13 ' <MethodCall> ::= Method '(' ')' ';'
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.

        Parser.LoadTables(Path.Combine(Application.StartupPath, "gramatica_dron4.0.egt"))
    End Sub
    
    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done as Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response              
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    '.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True
                    arbol = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError 
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Public Function ObtenerArbol() As AST
        Return arbol
    End Function

    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing
        Dim nuevaVariable As Variable = Nothing
        Dim nuevoMetodo As Metodo = Nothing

        Dim variable As String = ""
        Dim valor As String = ""


        With Reduction
            Select Case .Parent.TableIndex                        
                Case ProductionIndex.Program
                    ' <Program> ::= <Command> 
                    Return New AST(CreateNewObject(Reduction.Data(0)))

                Case ProductionIndex.Command
                    ' <Command> ::= <VariableDeclaration> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList

                Case ProductionIndex.Command2
                    ' <Command> ::= <MethodDeclaration> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList

                Case ProductionIndex.Command3
                    ' <Command> ::= <MethodCall> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList

                Case ProductionIndex.Variabledeclaration_Var_Startidentifier_Semi
                    ' <VariableDeclaration> ::= var StartIdentifier ';' 
                    ' token = Reduction.Item(1).Data
                    ' variable = New Variable(token)

                    variable = Reduction.Data(1).ToString
                    valor = Simbolo.Tipo_Var.LOGICO

                    nuevaVariable = New Variable(variable, valor)
                    nuevaVariable.Ejecutar(ts)
                    Result = nuevaVariable

                Case ProductionIndex.Variabledeclaration_Var_Actionidentifier_Semi
                    ' <VariableDeclaration> ::= var ActionIdentifier ';'

                    variable = Reduction.Data(1).ToString
                    valor = Simbolo.Tipo_Var.NUMERO

                    nuevaVariable = New Variable(variable, valor)
                    nuevaVariable.Ejecutar(ts)
                    Result = nuevaVariable

                Case ProductionIndex.Assignment_Startidentifier_Eq_Boolean_Semi
                    ' <Assignment> ::= StartIdentifier '=' Boolean ';' 


                    Dim value = ts.GetValor(Reduction.Data(0).ToString())
                    Dim metodo = New Metodo(Reduction.Data(2).ToString())



                Case ProductionIndex.Assignment_Actionidentifier_Eq_Number_Semi
                    ' <Assignment> ::= ActionIdentifier '=' Number ';' 

                    Dim value = ts.GetValor(Reduction.Data(0).ToString())

                    'Result = New Asignacion(Reduction.Data(0).ToString())

                Case ProductionIndex.Assignments
                    ' <Assignments> ::= <Assignments> <Assignment> 

                    If metodo.Equals("apagarMotor") Then
                        CreateNewObject(Reduction.Item(1).Data)
                    Else
                        CreateNewObject(Reduction.Item(0).Data)
                        CreateNewObject(Reduction.Item(1).Data)
                    End If




                Case ProductionIndex.Assignments2
                    ' <Assignments> ::= <Assignment> 
                    CreateNewObject(Reduction.Item(0).Data)

                Case ProductionIndex.Methoddeclaration_Void_Method_Lparen_Rparen_Lbrace
                    ' <MethodDeclaration> ::= void Method '(' ')' '{'

                    Dim value = Reduction.Item(1).Data.ToString()
                    Dim valorMetodo = Simbolo.Tipo_Var.METODO

                    metodo = Reduction.Item(1).Data.ToString()

                    nuevoMetodo = New Metodo(value, valorMetodo)
                    nuevoMetodo.Ejecutar(ts2)

                    Result = New Metodo()
                Case ProductionIndex.Methoddeclaration_Lbracket_Rbracket
                    ' <MethodDeclaration> ::= '[' <Assignments> ']' 
                    CreateNewObject(Reduction.Item(1).Data)
                    Result = New Metodo()
                Case ProductionIndex.Methoddeclaration_Rbrace_Semi
                    ' <MethodDeclaration> ::= '}' ';' 
                    Result = New Metodo()

                Case ProductionIndex.Methodcall_Method_Lparen_Rparen_Semi
                    ' <MethodCall> ::= METHOD '(' ')' ';' 

                    Dim value = ts2.GetMetodo(Reduction.Data(0).ToString())
                    Result = New MetodoLlamada()

            End Select
        End With




        Return Result
    End Function
End Module
